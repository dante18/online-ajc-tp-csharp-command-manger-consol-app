// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TpCommandManagerDbContext;

#nullable disable

namespace TpCommandManagerDbContext.Migrations
{
    [DbContext(typeof(TpCommandManagerContext))]
    [Migration("20250906083139_UpdateDataBase2")]
    partial class UpdateDataBase2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLivraison")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BurgerId")
                        .HasColumnType("int");

                    b.Property<bool>("EstAllergene")
                        .HasColumnType("bit");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pates");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Produit");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.ProduitCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("ProduitCommande");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Boisson", b =>
                {
                    b.HasBaseType("TpCommandManagerDbContext.Entities.Produit");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.Property<bool>("Petillant")
                        .HasColumnType("bit");

                    b.ToTable("Boisson");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Nourriture", b =>
                {
                    b.HasBaseType("TpCommandManagerDbContext.Entities.Produit");

                    b.Property<bool>("Vegetarien")
                        .HasColumnType("bit");

                    b.ToTable("Nourriture");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Burger", b =>
                {
                    b.HasBaseType("TpCommandManagerDbContext.Entities.Nourriture");

                    b.ToTable("Burger");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pasta", b =>
                {
                    b.HasBaseType("TpCommandManagerDbContext.Entities.Nourriture");

                    b.Property<float>("Kcal")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pizza", b =>
                {
                    b.HasBaseType("TpCommandManagerDbContext.Entities.Nourriture");

                    b.Property<int>("PateId")
                        .HasColumnType("int");

                    b.HasIndex("PateId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Commande", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerDbContext.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Ingredient", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Burger", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("BurgerId");

                    b.HasOne("TpCommandManagerDbContext.Entities.Pizza", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.ProduitCommande", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Commande", null)
                        .WithMany("ProduitCommande")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerDbContext.Entities.Produit", null)
                        .WithMany("ProduitCommande")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Utilisateur", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Boisson", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Produit", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerDbContext.Entities.Boisson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Nourriture", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Produit", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerDbContext.Entities.Nourriture", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Burger", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Nourriture", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerDbContext.Entities.Burger", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pasta", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Nourriture", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerDbContext.Entities.Pasta", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pizza", b =>
                {
                    b.HasOne("TpCommandManagerDbContext.Entities.Nourriture", null)
                        .WithOne()
                        .HasForeignKey("TpCommandManagerDbContext.Entities.Pizza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpCommandManagerDbContext.Entities.Pate", "Pate")
                        .WithMany()
                        .HasForeignKey("PateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pate");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Commande", b =>
                {
                    b.Navigation("ProduitCommande");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Produit", b =>
                {
                    b.Navigation("ProduitCommande");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Burger", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TpCommandManagerDbContext.Entities.Pizza", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
